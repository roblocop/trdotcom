package  {    import flash.events.EventDispatcher;    import flash.utils.Dictionary;        import org.puremvc.as3.core.View;    import org.puremvc.as3.interfaces.INotification;    import org.puremvc.as3.patterns.observer.Observer;        import flexunit.framework.TestCase;        /**     * Adapted from original [http://code.google.com/p/puremvc-flexunit-testing/]     * @author Tim Robles     */    public class NotificationTestCase extends TestCase    {    	    	//----------------------------------    	//  Protected Members     	//----------------------------------    	    	protected var dispatcher:EventDispatcher;    	protected var observerMap:Dictionary;    	    	//--------------------------------------------------------------------------    	//    	//  Constructor    	//    	//--------------------------------------------------------------------------    	    	public function NotificationTestCase(methodName:String = null)     	{    		super(methodName);    	}    	    	//--------------------------------------------------------------------------    	//    	//  Public Methods    	//    	//--------------------------------------------------------------------------    	    	override public function setUp():void    	{    		super.setUp();    		dispatcher = new EventDispatcher();    		observerMap = new Dictionary(true);    	}    	    	override public function tearDown():void    	{    		super.tearDown();    		removeAllObservers();    		dispatcher = null;    		observerMap = null;    	}    	    	//--------------------------------------------------------------------------    	//    	//  Protected Methods    	//    	//--------------------------------------------------------------------------    	    	protected function registerObserver(notificationName:String, callback:Function, timeout:int = 5000):void    	{    		var asyncCallback:Function = addAsync(callback, timeout);    		dispatcher.addEventListener(notificationName, asyncCallback, false, 0, true);    		var handler:Function = function(notification:INotification):void    		{    			dispatcher.dispatchEvent(new NotificationEvent(notification));    		};    		View.getInstance().registerObserver(notificationName, new Observer(handler, this));    		observerMap[notificationName] = asyncCallback;    	}    	 		protected function removeObserver(notificationName:String):void 		{ 			dispatcher.removeEventListener(notificationName, observerMap[notificationName] as Function); 			delete observerMap[notificationName];	 			View.getInstance().removeObserver(notificationName, this); 		} 		 		protected function removeAllObservers():void 		{ 			for (var notificationName:String in observerMap) 				removeObserver(notificationName); 		}    }}